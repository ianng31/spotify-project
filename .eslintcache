[{"/mnt/c/Users/ianng/Desktop/CODE/spotify-project/src/index.js":"1","/mnt/c/Users/ianng/Desktop/CODE/spotify-project/src/App.js":"2","/mnt/c/Users/ianng/Desktop/CODE/spotify-project/src/reportWebVitals.js":"3","/mnt/c/Users/ianng/Desktop/CODE/spotify-project/src/Components/GiantSwitch/index.js":"4","/mnt/c/Users/ianng/Desktop/CODE/spotify-project/src/Utils/index.js":"5","/mnt/c/Users/ianng/Desktop/CODE/spotify-project/src/Utils/constants.js":"6"},{"size":500,"mtime":1608337934472,"results":"7","hashOfConfig":"8"},{"size":4193,"mtime":1608421209437,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1608337934501,"results":"10","hashOfConfig":"8"},{"size":1555,"mtime":1608344010616,"results":"11","hashOfConfig":"8"},{"size":7212,"mtime":1608420411491,"results":"12","hashOfConfig":"8"},{"size":185,"mtime":1608419807026,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"10coxio",{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/mnt/c/Users/ianng/Desktop/CODE/spotify-project/src/index.js",[],["28","29"],"/mnt/c/Users/ianng/Desktop/CODE/spotify-project/src/App.js",["30","31","32"],"/mnt/c/Users/ianng/Desktop/CODE/spotify-project/src/reportWebVitals.js",[],"/mnt/c/Users/ianng/Desktop/CODE/spotify-project/src/Components/GiantSwitch/index.js",[],"/mnt/c/Users/ianng/Desktop/CODE/spotify-project/src/Utils/index.js",["33"],"import {CLIENT_ID, CLIENT_SECRET, REDIRECT_URI} from './constants'\n\n\nlet SpotifyWebApi = require('spotify-web-api-node');\n\n// credentials are optional\nlet spotifyApi = new SpotifyWebApi({\n  clientId: CLIENT_ID,\n  clientSecret: CLIENT_SECRET,\n  redirectUri: REDIRECT_URI,\n});\n\nconst clearDiscoverDaily = async (accessToken) => {\n  spotifyApi.setAccessToken(accessToken);\n  \n  spotifyApi.getMe()\n  .then(data => {\n      return {display_name: data.body.display_name, id: data.body.id}\n  })\n  .then(async userInfo => {\n\n      spotifyApi.getUserPlaylists(userInfo.id, { limit: 50 })\n        .then(async (data) => {\n          //console.log('Retrieved playlists', data.body.items[0]);\n            //data.body.items.forEach(item => console.log(item.name))\n  \n            const clearPlaylist = async () => {\n              let testPlaylist = data.body.items.find(obj => obj.name === \"Discover Daily by Ian\")\n              \n              if (testPlaylist !== undefined) {\n                let total = testPlaylist.tracks.total\n                while (total > 0) {\n                    let p = await spotifyApi.getPlaylist(testPlaylist.id)\n                    let tracksToRemove = p.body.tracks.items.map(x => {\n                      return {\"uri\" : x.track.uri}\n                    }) \n                    \n                    console.log(tracksToRemove)\n                    \n                    await spotifyApi.removeTracksFromPlaylist(testPlaylist.id, tracksToRemove)\n                    .then(() => console.log('successfully deleted'))\n                    .catch(err => console.log('Something went wrong!', err))\n                    \n                    total += -100\n                }                \n                let newTest = await spotifyApi.getPlaylist(testPlaylist.id)\n                console.log(\"should now be empty\", newTest.body.tracks.total)\n              }\n\n              console.log('done')\n            }\n\n            clearPlaylist()\n            \n            console.log('pls')\n        })\n        \n    })\n}\n\nexport const createDiscoverDaily = (accessToken, setShowtButton, setGenerated) => {\n  setShowtButton(false)\n\n  spotifyApi.setAccessToken(accessToken);\n  \n  let mySetNames = new Set()\n  let mySetIDs = new Set()\n  \n  spotifyApi.getMe()\n  .then(data => {\n      return {display_name: data.body.display_name, id: data.body.id}\n  })\n  .then(async userInfo => {\n      console.log(userInfo.id)\n  \n      spotifyApi.getUserPlaylists(userInfo.id, { limit: 50 })\n        .then(async (data) => {\n          //console.log('Retrieved playlists', data.body.items[0]);\n            //data.body.items.forEach(item => console.log(item.name))\n  \n            const createPlaylist = async () => {\n              let testPlaylist = data.body.items.find(obj => obj.name === \"Discover Daily by Ian\")\n              \n              if (testPlaylist === undefined) {\n                const data = await spotifyApi.createPlaylist('Discover Daily by Ian', { 'description': 'My description', 'public': true })\n                .then(() => console.log('created playlist!'))\n              }\n            }\n            \n            await clearDiscoverDaily(accessToken)\n            await createPlaylist()\n              \n            let d = await spotifyApi.getUserPlaylists(userInfo.id, {limit : 50})\n            let discoverDaily = d.body.items.find(obj => obj.name === \"Discover Daily by Ian\")\n  \n            console.log('getting discoverDaily', discoverDaily !== undefined)\n  \n            if (discoverDaily !== undefined) {\n              let dailyMixes = data.body.items.filter(item => item.name.startsWith('Daily Mix'))\n              let remainingPlaylists = data.body.items.filter(item => !item.name.startsWith('Daily Mix'))\n              remainingPlaylists = remainingPlaylists.filter(item => !item.name.startsWith('Discover'))\n              remainingPlaylists = remainingPlaylists.filter(item => item.owner.id === userInfo.id)\n              \n              async function populateSet () { \n                \n                for (const x of remainingPlaylists) {\n                  let remainingSongs = x.tracks.total;\n                  //console.log(x.name + \" has \" + remainingSongs)\n                  let offset = 0\n                  while (remainingSongs - 100 > 0) {\n  \n                    let playlist = await spotifyApi.getPlaylist(x.id)\n                    let tracks = await spotifyApi.getPlaylistTracks(playlist.body.id, {limit : 100, offset : offset})\n                    let items = tracks.body.items\n                    items.forEach(x => {\n                      if (x != null && x.track != null) {\n                        mySetIDs.add(x.track.id)\n                        mySetNames.add(x.track.name)\n                        //console.log(x.track.name)\n                      }\n                    })\n                    offset += 100\n                    remainingSongs -= 100\n                  }\n                  //console.log('===================there are', remainingSongs, \"remaining=========================\")\n  \n                  if (remainingSongs > 0) {\n                    let playlist = await spotifyApi.getPlaylist(x.id)\n                    let tracks = await spotifyApi.getPlaylistTracks(playlist.body.id, {limit : remainingSongs, offset : offset})\n  \n                    let items = tracks.body.items\n                    items.forEach(x => {\n                      if (x != null && x.track != null) {\n                        mySetIDs.add(x.track.id)\n                        mySetNames.add(x.track.name)\n                        //console.log(x.track.name)\n                      }\n                    })\n                    \n                  }\n  \n                }\n                console.log('finished populating')\n              }\n              \n              async function filterSongs () {\n                for (const x of dailyMixes) {\n                  let playlist = await spotifyApi.getPlaylist(x.id)    \n                  \n                  let tracks = playlist.body.tracks\n                  let items = tracks.items\n                  let tracksToAdd = []\n                  \n                  //console.log(\"==============\",x.name,\"=============\")\n  \n                  items.forEach(x => {\n                    if (!mySetIDs.has(x.track.id) && !mySetNames.has(x.track.name)) {\n                      //console.log(x.track.name)\n                      tracksToAdd.push(x.track.uri)\n                    }\n                  })\n\n                  //console.log(tracksToAdd)\n                  await spotifyApi.addTracksToPlaylist(discoverDaily.id, tracksToAdd)\n                  .then(function(data) {\n                    console.log('Added tracks to playlist!');\n                  }, function(err) {\n                    console.log('Something went wrong!', err);\n                  });\n                }\n                \n                console.log('finished filtering')\n              }\n              \n              await populateSet().catch(x => console.log(x))\n              console.log(mySetIDs.size, mySetNames.size);\n              await filterSongs()\n            }\n            \n  \n            console.log('pls')\n            //setShowtButton(true)\n            setGenerated(true)\n        })\n        \n    })\n}\n\n","/mnt/c/Users/ianng/Desktop/CODE/spotify-project/src/Utils/constants.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":9,"column":8,"nodeType":"40","messageId":"41","endLine":9,"endColumn":19},{"ruleId":"42","severity":1,"message":"43","line":66,"column":15,"nodeType":"44","endLine":66,"endColumn":46},{"ruleId":"38","severity":1,"message":"45","line":77,"column":9,"nodeType":"40","messageId":"41","endLine":77,"endColumn":21},{"ruleId":"38","severity":1,"message":"46","line":85,"column":23,"nodeType":"40","messageId":"41","endLine":85,"endColumn":27},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'GiantSwitch' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Assignments to the 'token' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'handleChange' is assigned a value but never used.","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]