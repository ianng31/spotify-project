{"version":3,"sources":["Components/GiantSwitch/index.js","Utils/index.js","App.js","reportWebVitals.js","index.js"],"names":["withStyles","theme","root","width","height","padding","margin","spacing","switchBase","transform","color","palette","common","white","backgroundColor","opacity","border","thumb","track","borderRadius","grey","transition","transitions","create","checked","focusVisible","classes","props","Switch","focusVisibleClassName","disableRipple","spotifyApi","require","clientId","clientSecret","redirectUri","useStyles","makeStyles","box","display","flexDirection","justifyContent","alignItems","alignContent","textAlign","app","text","marginBottom","whiteText","marginBototm","textTitle","button","Height","fontSize","App","token","Cookies","get","React","useState","checkedB","state","document","body","style","console","log","className","Provider","value","Box","Typography","Button","onClick","accessToken","setAccessToken","mySetNames","Set","mySetIDs","getMe","then","data","display_name","id","userInfo","a","getUserPlaylists","limit","createPlaylist","undefined","testPlaylist","items","find","obj","name","getPlaylist","p","tracksToRemove","tracks","map","x","uri","removeTracksFromPlaylist","catch","err","newTest","total","d","discoverDaily","populateSet","remainingPlaylists","remainingSongs","offset","playlist","getPlaylistTracks","forEach","add","filterSongs","dailyMixes","tracksToAdd","has","push","addTracksToPlaylist","filter","item","startsWith","owner","size","createDiscoverDaily","variant","clientID","scopes","Scopes","playlistReadPrivate","playlistModifyPublic","playlistReadCollaborative","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.43fe8b4c.chunk.js","sourcesContent":["import React from 'react' \nimport {  FormControlLabel, Switch } from '@material-ui/core'\nimport { withStyles } from '@material-ui/core/styles';\n\nconst IOSSwitch = withStyles((theme) => ({\n  root: {\n    width: 200,\n    height: 100,\n    padding: 0,\n    margin: theme.spacing(1),\n  },\n  switchBase: {\n    padding: 1,\n    '&$checked': {\n      transform: 'translateX(100px)',\n      color: theme.palette.common.white,\n      '& + $track': {\n        backgroundColor: '#52d869',\n        opacity: 1,\n        border: 'none',\n      },\n    },\n    '&$focusVisible $thumb': {\n      color: '#52d869',\n      border: '6px solid #fff',\n    },\n  },\n  thumb: {\n    width: 98,\n    height: 98,\n  },\n  track: {\n    borderRadius: 26 / 2,\n    border: `1px solid ${theme.palette.grey[400]}`,\n    backgroundColor: theme.palette.grey[50],\n    opacity: 1,\n    transition: theme.transitions.create(['background-color', 'border']),\n  },\n  checked: {},\n  focusVisible: {},\n}))(({ classes, ...props }) => {\n  return (\n    <Switch\n      focusVisibleClassName={classes.focusVisible}\n      disableRipple\n      classes={{\n        root: classes.root,\n        switchBase: classes.switchBase,\n        thumb: classes.thumb,\n        track: classes.track,\n        checked: classes.checked,\n      }}\n      {...props}\n    />\n  );\n});\n \nconst GiantSwitch = ({state, setState, handleChange}) => {\n  return (\n      <div>\n        <FormControlLabel\n            control={<IOSSwitch checked={state.checkedA} onChange={handleChange} name=\"checkedB\" />}\n        />\n      </div>\n  )\n}\nexport default GiantSwitch","const CLIENT_ID = \"53dd95d5f7374e28a839828753099534\"\nconst CLIENT_SECRET = \"b407566bddfc4a73b86b25fcc1e7962e\"\nconst REDIRECT_URI = \"http://localhost:3000/callback\"\n\n\nlet SpotifyWebApi = require('spotify-web-api-node');\n\n// credentials are optional\nlet spotifyApi = new SpotifyWebApi({\n  clientId: CLIENT_ID,\n  clientSecret: CLIENT_SECRET,\n  redirectUri: REDIRECT_URI,\n});\n\nexport const createDiscoverDaily = (accessToken) => {\n\n  spotifyApi.setAccessToken(accessToken);\n  \n  let mySetNames = new Set()\n  let mySetIDs = new Set()\n  \n  spotifyApi.getMe()\n  .then(data => {\n      return {display_name: data.body.display_name, id: data.body.id}\n  })\n  .then(async userInfo => {\n      console.log(userInfo.id)\n  \n      spotifyApi.getUserPlaylists(userInfo.id, { limit: 50 })\n        .then(async (data) => {\n          //console.log('Retrieved playlists', data.body.items[0]);\n            //data.body.items.forEach(item => console.log(item.name))\n  \n  \n            const createPlaylist = async () => {\n              let testPlaylist = data.body.items.find(obj => obj.name === \"Discover Daily by Ian\")\n              \n              \n              if (testPlaylist === undefined) {\n                const data = await spotifyApi.createPlaylist('Discover Daily by Ian', { 'description': 'My description', 'public': true })\n                .then(() => console.log('created playlist!'))\n              } else {\n                let p = await spotifyApi.getPlaylist(testPlaylist.id)\n                let tracksToRemove = p.body.tracks.items.map(x => x.track.uri) \n                \n                console.log(tracksToRemove)\n                \n                await spotifyApi.removeTracksFromPlaylist(testPlaylist.id, tracksToRemove)\n                .then(() => console.log('successfully deleted'))\n                .catch(err => console.log('Something went wrong!', err))\n                \n                let newTest = await spotifyApi.getPlaylist(testPlaylist.id)\n                console.log(\"should now be empty\", newTest.body.tracks.total)\n\n              }\n              console.log('done')\n            }\n\n            await createPlaylist()\n              \n            let d = await spotifyApi.getUserPlaylists(userInfo.id, {limit : 50})\n            let discoverDaily = d.body.items.find(obj => obj.name === \"Discover Daily by Ian\")\n  \n            console.log('getting discoverDaily', discoverDaily !== undefined)\n  \n            if (discoverDaily !== undefined) {\n              let dailyMixes = data.body.items.filter(item => item.name.startsWith('Daily Mix'))\n              let remainingPlaylists = data.body.items.filter(item => !item.name.startsWith('Daily Mix'))\n              remainingPlaylists = remainingPlaylists.filter(item => item.owner.id === userInfo.id)\n              \n              async function populateSet () { \n                \n                for (const x of remainingPlaylists) {\n                  let remainingSongs = x.tracks.total;\n                  //console.log(x.name + \" has \" + remainingSongs)\n                  let offset = 0\n                  while (remainingSongs - 100 > 0) {\n  \n                    let playlist = await spotifyApi.getPlaylist(x.id)\n                    let tracks = await spotifyApi.getPlaylistTracks(playlist.body.id, {limit : 100, offset : offset})\n                    let items = tracks.body.items\n                    items.forEach(x => {\n                      if (x != null && x.track != null) {\n                        mySetIDs.add(x.track.id)\n                        mySetNames.add(x.track.name)\n                        //console.log(x.track.name)\n                      }\n                    })\n                    offset += 100\n                    remainingSongs -= 100\n                  }\n                  //console.log('===================there are', remainingSongs, \"remaining=========================\")\n  \n                  if (remainingSongs > 0) {\n                    let playlist = await spotifyApi.getPlaylist(x.id)\n                    let tracks = await spotifyApi.getPlaylistTracks(playlist.body.id, {limit : remainingSongs, offset : offset})\n  \n                    let items = tracks.body.items\n                    items.forEach(x => {\n                      if (x != null && x.track != null) {\n                        mySetIDs.add(x.track.id)\n                        mySetNames.add(x.track.name)\n                        //console.log(x.track.name)\n                      }\n                    })\n                    \n                  }\n  \n                }\n                console.log('finished populating')\n              }\n              \n              async function filterSongs () {\n                for (const x of dailyMixes) {\n                  let playlist = await spotifyApi.getPlaylist(x.id)    \n                  \n                  let tracks = playlist.body.tracks\n                  let items = tracks.items\n                  let tracksToAdd = []\n                  \n                  //console.log(\"==============\",x.name,\"=============\")\n  \n                  items.forEach(x => {\n                    if (!mySetIDs.has(x.track.id) && !mySetNames.has(x.track.name)) {\n                      //console.log(x.track.name)\n                      tracksToAdd.push(x.track.uri)\n                    }\n                  })\n                  //console.log(tracksToAdd)\n                  spotifyApi.addTracksToPlaylist(discoverDaily.id, tracksToAdd)\n                  .then(function(data) {\n                    console.log('Added tracks to playlist!');\n                  }, function(err) {\n                    console.log('Something went wrong!', err);\n                  });\n                }\n                \n                //console.log('finished filtering')\n              }\n              \n              await populateSet().catch(x => console.log(x))\n              console.log(mySetIDs.size, mySetNames.size);\n              await filterSongs()\n            }\n            \n  \n            console.log('pls')\n        })\n        \n    })\n}\n\n","import React from 'react'\nimport { SpotifyApiContext } from 'react-spotify-api'\nimport Cookies from 'js-cookie'\n \nimport { SpotifyAuth, Scopes } from 'react-spotify-auth'\nimport 'react-spotify-auth/dist/index.css'\nimport { Box, Typography, Button } from '@material-ui/core'\nimport { makeStyles } from '@material-ui/core/styles';\nimport GiantSwitch  from './Components/GiantSwitch'\nimport { createDiscoverDaily } from './Utils/index'\n\nconst useStyles = makeStyles(() => ({\n  box: {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n      alignItems: 'center',\n      alignContent: 'center',\n      height: '100vh',\n      width: '100vw',\n      textAlign: 'center'\n    },\n    app: {\n      width: '100%',\n      height: '100%',\n    },\n    text: {\n      marginBottom: '2%',\n    },\n    whiteText: {\n      color: 'white',\n      marginBototm: '2%'\n    },\n    textTitle: {\n      color: '#1db954',\n      marginBottom: '2%',\n    },\n    button: {\n      backgroundColor: '#1db954',\n      color: 'white',\n      width: '70vw',\n      Height: '50vh',\n      fontSize: '4vw',\n      borderRadius: '80px'\n    }\n}));\n \nconst App = () => {\n  const token = Cookies.get('spotifyAuthToken')\n  const classes = useStyles();\n  const [state, setState] = React.useState({\n    checkedB: false,\n  });\n\n  const handleChange = (event) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n    if (event.target.checked) {\n      console.log('yes yes')\n    }\n  };\n\n  document.body.style.backgroundColor = 'white';\n\n  token && console.log(`You are authorized with token: ${token}`)\n\n  return (\n    <div className={classes.app}>\n      {token ? (\n        <SpotifyApiContext.Provider value={token}>\n          {/* Your Spotify Code here */}\n          <Box className={classes.box}>\n            <Typography className={state.checkedB ? classes.whiteText : classes.text}>Disclaimer: At the moment Spotify has not made an API for the daily mix playlists. \n            For this feature to work please add all of your daily mix playlists to your library.\n            </Typography>\n            <Button \n            onClick={() => createDiscoverDaily(token)}\n            className={classes.button}\n            >\n              Generate Discover Daily\n            </Button>\n          </Box>\n        </SpotifyApiContext.Provider>\n      ) : (\n        // Display the login page\n        <Box className={classes.box}>\n          <Typography className={classes.textTitle} variant='h1'>Discover Daily</Typography>\n          <Typography className={classes.text} >\n            Extract the songs you haven't heard of from the daily mix playlists every day\n            for a complete playlist of just new songs.\n          </Typography>\n\n          <SpotifyAuth\n            redirectUri='https://ianng31.github.io/spotify-project/discoverdaily'\n            clientID='53dd95d5f7374e28a839828753099534'\n            scopes={\n              [\n                Scopes.playlistReadPrivate, \n                Scopes.playlistModifyPublic, \n                Scopes.playlistReadCollaborative\n              ]\n            } // either style will work\n          />\n        </Box>\n      )}\n    </div>\n  )\n}\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}